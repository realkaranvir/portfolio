import{J as a,_ as r,v as l,x as t,B as i,K as n,t as c}from"./2IBAxp9F.js";const d=a("/images/tar/tar_usage.png"),g=a("/images/tar/tar_makefile.png"),p=a("/images/tar/tar_files.png"),f={name:"tar",methods:{openLink(s){window.open(s,"_blank")}}},m={class:"flex flex-col items-center text-center p-10 space-y-5"},x={class:"animate-pulse text-sea-green cursor-pointer"};function u(s,e,v,b,h,o){return c(),l("div",m,[e[1]||(e[1]=t("h1",{class:"text-4xl lg:text-8xl"},[i(" {"),t("span",{class:"text-neon-blue"},"Tar"),i("} ")],-1)),e[2]||(e[2]=t("h3",{class:"text-3xl"},"USTAR compliant tar archiver and extractor.",-1)),t("div",x,[t("p",{onClick:e[0]||(e[0]=w=>o.openLink("https://github.com/realkaranvir/tar")),class:"hover:text-blue-600"}," View Github Repo -> ")]),e[3]||(e[3]=n('<div class="flex flex-col items-center justify-center flex-wrap"><div class="bg-black bg-opacity-10 p-4 rounded-3xl m-5"><div class="bg-black bg-opacity-10 p-2 rounded-3xl"><img src="'+d+'" class="w-lg rounded-3xl"></div></div><h3 class="text-lg lg:text-3xl w-lg bg-black rounded-3xl p-2"> The mytar project is a command-line tool designed for basic tar file management, supporting the creation, listing, and extraction of tar archives while adhering to the USTAR format, a widely-used tar standard. It offers options for creating new archives, viewing the contents without extraction, and restoring files from an archive. Users can also increase verbosity to get detailed output during operations and enforce strict compliance with tar standards. The f option specifies the archive file, making it easy to work with different tar files. The tool aims to provide a simple yet effective solution for managing tar archives. </h3></div><div class="flex flex-col lg:flex-row items-center justify-center flex-wrap"><div class="bg-black bg-opacity-10 p-4 rounded-3xl m-5"><div class="bg-black bg-opacity-10 p-2 rounded-3xl"><img src="'+g+'" class="w-lg rounded-3xl"></div></div><h3 class="text-lg lg:text-3xl w-lg bg-black rounded-3xl p-2"> The Makefile for the mytar project automates the build process, making development faster and more consistent by using make to manage dependencies and compile the source files. It defines rules to build the mytar executable and its components with gcc, applying compilation flags for warnings and debugging. This automation avoids manual compilation, rebuilding only changed files, and includes a clean target for easy removal of generated files. </h3></div><div class="flex flex-col lg:flex-row items-center justify-center flex-wrap"><div class="bg-black bg-opacity-10 p-4 rounded-3xl m-5"><div class="bg-black bg-opacity-10 p-2 rounded-3xl"><img src="'+p+'" class="w-lg rounded-3xl"></div></div></div>',3))])}const y=r(f,[["render",u]]);export{y as default};
